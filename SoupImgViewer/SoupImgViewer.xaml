<UserControl x:Class="Soup.ImgViewer"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:halcondotnet="clr-namespace:HalconDotNet;assembly=halcondotnet"
             xmlns:local="clr-namespace:Soup"
             mc:Ignorable="d" 
             Loaded="UserControl_Loaded"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

        <Style x:Key="TabControlStyle1" TargetType="{x:Type TabControl}">
            <Setter Property="Padding" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0"/>
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                <RowDefinition x:Name="RowDefinition1" Height="*"/>
                            </Grid.RowDefinitions>
                            <TabPanel Visibility="Collapsed" x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                            <Border x:Name="contentPanel" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TextRadioBtnStyle" TargetType="{x:Type RadioButton}">
            <Setter Property="FontFamily" Value="Microsoft YaHei UI"/>
            <Setter Property="FontWeight" Value="Medium"/>
            <Setter Property="Foreground" Value="#CCCED2"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="radioButtonBorder" CornerRadius="0" Background="{TemplateBinding Background}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="#1d564f"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="#1d564f"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="#1d564f"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Image x:Key="DragImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/edit.png"/>
        <Image x:Key="HoverDragImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/edit_hover.png"/>

        <Style x:Key="DragBtnStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource TextRadioBtnStyle}">
            <Setter Property="Content" Value="{StaticResource DragImg}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverDragImg}"></Setter>                                
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverDragImg}"></Setter>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverDragImg}"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Image x:Key="RectImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/rect.png"/>
        <Image x:Key="HoverRectImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/rect_hover.png"/>

        <Style x:Key="RectBtnStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource TextRadioBtnStyle}">
            <Setter Property="Content" Value="{StaticResource RectImg}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverRectImg}"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverRectImg}"></Setter>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverRectImg}"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Image x:Key="CircleImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/circle.png"/>
        <Image x:Key="HoverCircleImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/circle_hover.png"/>

        <Style x:Key="CircleBtnStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource TextRadioBtnStyle}">
            <Setter Property="Content" Value="{StaticResource CircleImg}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverCircleImg}"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverCircleImg}"></Setter>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverCircleImg}"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Image x:Key="PolygonImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/polygon.png"/>
        <Image x:Key="HoverPolygonImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/polygon_hover.png"/>

        <Style x:Key="PolyBtnStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource TextRadioBtnStyle}">
            <Setter Property="Content" Value="{StaticResource PolygonImg}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverPolygonImg}"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverPolygonImg}"></Setter>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverPolygonImg}"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Image x:Key="GraspImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/grasp.png"/>
        <Image x:Key="HoverGraspImg" Width="30" Height="30" RenderOptions.BitmapScalingMode="HighQuality"  Source="/SoupImgViewer;component/Resources/grasp_hover.png"/>

        <Style x:Key="GraspBtnStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource TextRadioBtnStyle}">
            <Setter Property="Content" Value="{StaticResource GraspImg}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverGraspImg}"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverGraspImg}"></Setter>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Content" Value="{StaticResource HoverGraspImg}"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="BlueButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="#CCCED2"/>
            <Setter Property="Background" Value="#393f4b"/>
            <Setter Property="BorderThickness"  Value="1"/>
            <Setter Property="FontFamily" Value="Microsoft YaHei"/>
            <Setter Property="FontStyle" Value="Normal"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#FF1D564F"/>
                                <Setter Property="BorderThickness" TargetName="border" Value="2"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF1D564F"/>
                                <Setter Property="Foreground" Value="#FFFFFF "/>

                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#FF1D564F"/>
                                <Setter Property="BorderThickness" TargetName="border" Value="2"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF1D564F"/>
                                <Setter Property="Foreground" Value="#FFFFFF "/>

                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="OpacityBackground" Color="#121719" Opacity="0.5"></SolidColorBrush>
    </UserControl.Resources>

    <Grid Background="#121719">
        <Grid.RowDefinitions>
            <RowDefinition Height="30"></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>

        <!--顶部工具栏-->
        <Grid Grid.Row="0" Panel.ZIndex="2" Visibility="{Binding IsDisplayToolBar, Converter={StaticResource BooleanToVisibilityConverter},  RelativeSource={RelativeSource AncestorType=local:ImgViewer, Mode=FindAncestor}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
            </Grid.ColumnDefinitions>
        </Grid>

        
        <!--左侧工具栏-->
        <Grid Panel.ZIndex="2" Background="#121719" Width="30" Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" HorizontalAlignment="Left" Margin="0,40,0,40" 
              Visibility="{Binding IsDisplaySideBar, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType=local:ImgViewer}}">
            <StackPanel x:Name="sideToolBar" Orientation="Vertical">
                <RadioButton x:Name="DragBtn" ToolTip="鼠标拖动" GroupName="sideToolGroup" Background="Transparent" Width="30" Height="30" HorizontalAlignment="Center" Checked="DragBtn_Checked" Unchecked="DragBtn_Unchecked" IsChecked="{Binding IsMouseArrowBtnChecked, RelativeSource={RelativeSource AncestorType=local:ImgViewer}}" Style="{StaticResource DragBtnStyle}"/>
                <Rectangle Width="30" Height="1" Stroke="Gray"></Rectangle>
                <RadioButton x:Name="RoiRect" ToolTip="矩形ROI" GroupName="sideToolGroup" Background="Transparent" Width="30" Height="30" HorizontalAlignment="Center" Checked="RoiRect_Checked" Unchecked="RoiRect_Unchecked"  Style="{StaticResource RectBtnStyle}"/>
                <Rectangle Width="30" Height="1" Stroke="Gray"></Rectangle>
                <RadioButton x:Name="RoiCircle" ToolTip="圆形ROI" GroupName="sideToolGroup" Background="Transparent" Width="30" Height="30" HorizontalAlignment="Center" Checked="RoiCircle_Checked" Unchecked="RoiCircle_Unchecked" Style="{StaticResource CircleBtnStyle}"/>
                <Rectangle Width="30" Height="1" Stroke="Gray"></Rectangle>
                <RadioButton x:Name="RoiCustomDraw" ToolTip="多边形ROI" GroupName="sideToolGroup" Background="Transparent" Width="30" Height="30" HorizontalAlignment="Center" Checked="RoiCustomDraw_Checked" Unchecked="RoiCustomDraw_Unchecked" Style="{StaticResource PolyBtnStyle}"/>
                <Rectangle Width="30" Height="1" Stroke="Gray"></Rectangle>
            </StackPanel>
        </Grid>

        <!--底部状态栏-->
        <Grid Panel.ZIndex="2" Background="{StaticResource OpacityBackground}"
              Visibility="{Binding IsDisplayBottomBar, RelativeSource={RelativeSource AncestorType=local:ImgViewer}, Converter={StaticResource BooleanToVisibilityConverter}}"
              Height="25" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" VerticalAlignment="Bottom">
            <!--2d image-->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" 
                        Visibility="{Binding ElementName=Btn2D, Path=IsChecked,Converter={StaticResource BooleanToVisibilityConverter}}" >
                <Label Foreground="White" Content="X" Width="20"></Label>

                <Label HorizontalAlignment="Left"  Width="40" Foreground="White" Content="{Binding ImageX, RelativeSource={RelativeSource AncestorType=local:ImgViewer}}"></Label>

                <Label Foreground="White" Content="Y" Width="20"></Label>

                <Label HorizontalAlignment="Left" Foreground="White" Width="40" Content="{Binding ImageY, RelativeSource={RelativeSource AncestorType=local:ImgViewer}}"></Label>

                <Rectangle Width="1" Height="12" Margin="5, 0, 15, 0 " StrokeThickness="1" Stroke="White"></Rectangle>

                <Label Foreground="White" Width="60" Content="{Binding PointGray,  RelativeSource={RelativeSource AncestorType=local:ImgViewer}}"></Label>
            </StackPanel>
        </Grid>

        
        <Grid Grid.Row="0" Grid.RowSpan="2">
            <halcondotnet:HSmartWindowControlWPF HKeepAspectRatio="True" Name="SmartWindow2D" SizeChanged="SmartWindow2D_SizeChanged" HMouseMove="SmartWindow2D_HMouseMove" HInitWindow="SmartWindow2D_Initialized">
            </halcondotnet:HSmartWindowControlWPF>

            <!--顶层canvas-->
            <Canvas x:Name="MouseCanvas" Visibility="Collapsed" Panel.ZIndex="1"  Background="Transparent" MouseLeftButtonDown="MouseCanvas_MouseLeftButtonDown" MouseMove="MouseCanvas_MouseMove" MouseUp="MouseCanvas_MouseUp"></Canvas>
        </Grid>
    </Grid>
</UserControl>
